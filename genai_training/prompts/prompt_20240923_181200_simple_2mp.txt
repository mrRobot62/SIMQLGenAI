#------------------------------------------------------------------------------
# autogenerated prompte file
# generated 2024-09-23 18:12:00
#------------------------------------------------------------------------------
prompt: Entwerfe mir einen MetaMesspunkt mit nutze '{mmp_name}'.
Verwende beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf den ersten Datensatz zu. Extrahiere Daten per der letzten drei Stichtage  .Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Entwerfe einen Metamesspunkt und verbinde mit folgenden Registrierungsnamen '{mmp_name}'
Setze diese folgende zwei Messpunkte '{mp1}', '{mp2}'.
per Lade Daten vorheriger Stichtag .Verwende die ältesten Datensätze.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle und verknüpfe mit Metamesspunkt '{mmp_name}'.
Lade diese angegeben Messpunkte '{mp1}', '{mp2}'.
lade jeden Datensatz. Hole Daten zum vorheriges Halbjahr beider Messpunkte.Bilde das Produkt aller Satz Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere Businesskey '{mmp_name}'
Verwende zwei Messpunkte '{mp1}' und '{mp2}'.
zum verwende die Daten dieses Halbjahr .lade alle Datensätze.Addiere die Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe MetaMesspunkt '{mmp_name}'.
Referenziere beiden Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten nutze der letzten zwei Stichtage .nutze jeden Datensatz.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Implementiere einen Metamesspunkt und benutze folgenden Registrierungsnamen '{mmp_name}'
Benutze diese Messpunkte '{mp1}' und '{mp2}'.
lade den letzten Datensatz. Importiere die Daten nutze der letzten zwei Quartale beider Messpunkte.Multipliziere die Ergebnisse
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Baue einen Metamesspunkt und verbinde folgenden Registrierungsnamen '{mmp_name}'
Referenziere  Messpunkte '{mp1}' und '{mp2}'.
Verwende die aktuellsten Datensätze. Extrahiere Daten nutze letzter Stichtag  .Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende MetaMesspunkt '{mmp_name}'.
Gebrauche zwei Messpunkte '{mp1}' und '{mp2}'.
Extrahiere Daten der Messpunkte  zum Stichtag.Verwende die aktuellsten Datensätze.Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe mir einen MetaMesspunkt mit verknüpfe mit '{mmp_name}'.
Gebrauche zwei Messpunkte '{mp1}' und '{mp2}'.
verwende die Daten  der letzten drei Stichtage .lade alle Datensätze.Berechne die Standardabweichung der Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere diesen neuen Metamesspunkt verwende '{mmp_name}'.
Gebrauche Messpunkte '{mp1}', '{mp2}'.
Prüfe die Daten nutze der letzten drei Stichtage .lade die frühesten Datensätze.Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verweise auf '{mmp_name}' und Kreiere einen neuen Metamesspunkt
Erstelle Messpunkte '{mp1}', '{mp2}'.
Greife auf den letzten Datensatz zu. Prüfe die Daten per letzten Stichtag  .Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verwende '{mmp_name}' und Baue einen neuen Metamesspunkt
Setze diese Messpunkte '{mp1}', '{mp2}'.
Hole Daten der Messpunkte  per vorherigen Stichtag.nutze den neusten Datensatz.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Gestalte einen Metamesspunkt und nutze diesen folgenden Registrierungsnamen '{mmp_name}'
Setze diese Messpunkte '{mp1}', '{mp2}'.
Hole Daten aller Messpunkte zum der letzten beiden Halbjahre.Verwende alle Datensätze.Aggregiere die Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe Businesskey '{mmp_name}'
Lade Messpunkte '{mp1}', '{mp2}'.
nutze den ersten Datensatz. Greife auf Daten zu per dieses Halbjahr der Messpunkte.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte diesen neuen Metamesspunkt verweise auf '{mmp_name}'.
Verwende folgende Messpunkte '{mp1}' und '{mp2}'.
zum Extrahiere Daten letztes Halbjahr beider Messpunkte.nutze den ersten Datensatz.Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe MetaMesspunkt '{mmp_name}'.
Verwende Messpunkte '{mp1}', '{mp2}'.
nutze alle Datensätze. Nutze die Daten zum der letzten zwei Halbjahre  .Berechne die Standardabweichung der Daten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: nutze diesen '{mmp_name}' und Kreiere einen neuen Metamesspunkt
Referenziere  Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten  der letzten zwei Jahren .Greife auf alle Datensätze zu.Aggregiere die Datensätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verbinde mit '{mmp_name}' und Implementiere einen neuen Metamesspunkt
Greife auf diese angegeben beiden Messpunkte '{mp1}' und '{mp2}'.
 Importiere die Daten der letzten drei Stichtage der Messpunkte.lade alle Datensätze.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte MetaMesspunkt '{mmp_name}'.
Greife auf beiden Messpunkte '{mp1}' und '{mp2}'.
 Hole Daten aktuellen und letzter Stichtag .Greife auf alle Datensätze zu.Berechne den kleinsten Wert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Installiere und referenziere mit '{mmp_name}'
Setze diese diese Messpunkte '{mp1}' und '{mp2}'.
Nutze die Daten aller Messpunkte per der letzten drei Jahren.lade jeden Datensatz.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere MetaMesspunkt '{mmp_name}'.
Gebrauche zwei Messpunkte '{mp1}' und '{mp2}'.
Verwende jeden Datensatz. Hole Daten  der letzten drei Stichtage  .Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte diesen neuen Metamesspunkt nutze diesen '{mmp_name}'.
Gebrauche Messpunkte '{mp1}', '{mp2}'.
nutze den neusten Datensatz. Hole Daten zum der letzten zwei Halbjahre der Messpunkte.Summiere alle Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verknüpfe '{mmp_name}' und Verwirkliche einen neuen Metamesspunkt
Lade zwei Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten nutze letzten Stichtag .Verwende den ältesten Datensatz.Berechne die Standardabweichung der Ergebnisse
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte mir einen MetaMesspunkt mit nutze '{mmp_name}'.
Lade Messpunkte '{mp1}', '{mp2}'.
Extrahiere Daten der Messpunkte  letzter Monat.Verwende den ältesten Datensatz.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verwende '{mmp_name}' und Verwende einen neuen Metamesspunkt
Gebrauche zwei Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten aller Messpunkte  der letzten zwei Stichtage.lade den letzten Datensatz.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Verwende einen Metamesspunkt und verknüpfe folgenden Registrierungsnamen '{mmp_name}'
Benötigt werden beiden Messpunkte '{mp1}' und '{mp2}'.
Lade Daten zum letztes Quartal .nutze die neusten Datensätze.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Baue und verknüpfe '{mmp_name}'
Verwende Messpunkte '{mp1}', '{mp2}'.
verwende die Daten  aktuelles Quartal .lade den letzten Datensatz.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue und verbinde mit Metamesspunkt '{mmp_name}'.
Gebrauche diese beiden Messpunkte '{mp1}' und '{mp2}'.
Lade Daten per vorherigen Stichtag .Verwende den ältesten Datensatz.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Setze diese Messpunkte '{mp1}', '{mp2}'.
Hole Daten  aktuelles Quartal .lade den ersten Datensatz.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere Businesskey '{mmp_name}'
Setze diese  Messpunkte '{mp1}', '{mp2}'.
Greife auf Daten zu nutze aktuellen und letzter Stichtag .lade alle Datensätze.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle diesen neuen Metamesspunkt verknüpfe '{mmp_name}'.
Benutze folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
Hole Daten nutze vorheriges Quartal .lade die letzten Datensätze.Berechne die Standardabweichung der Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue MetaMesspunkt '{mmp_name}'.
Benötigt werden Messpunkte '{mp1}', '{mp2}'.
Nutze die Daten beider Messpunkte nutze Halbjahr.nutze die ersten Datensätze.Bilde das Produkt aller Satz Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende mir einen MetaMesspunkt mit nutze '{mmp_name}'.
Verwende  beiden Messpunkte '{mp1}' und '{mp2}'.
per Nutze die Daten der letzten zwei Jahren .nutze alle Datensätze.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Verwende und verbinde mit '{mmp_name}'
Referenziere  beiden Messpunkte '{mp1}' und '{mp2}'.
 Lade Daten aktuelles Halbjahr aller Messpunkte.nutze alle Datensätze.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere mir einen MetaMesspunkt mit verbinde '{mmp_name}'.
Benötigt werden beiden Messpunkte '{mp1}' und '{mp2}'.
lade den ersten Datensatz. Hole Daten zum der letzten drei Stichtage aller Messpunkte.Multipliziere die Daten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere MetaMesspunkt '{mmp_name}'.
Gebrauche beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf alle Datensätze zu. Nutze die Daten nutze vorletzten Stichtag der Messpunkte.Führe eine Multiplikation der Werte durch
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere MetaMesspunkt '{mmp_name}'.
Verwende  beiden Messpunkte '{mp1}' und '{mp2}'.
Lade Daten beider Messpunkte zum der letzten beiden Stichtage.Verwende alle Datensätze.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere mir einen MetaMesspunkt mit benutze '{mmp_name}'.
Greife auf diese Messpunkte '{mp1}', '{mp2}'.
Lade Daten  letztes Halbjahr .Verwende den aktuellesten Datensatz.Multipliziere die Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle mir einen MetaMesspunkt mit verknüpfe '{mmp_name}'.
Benutze  beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf den letzten Datensatz zu. Prüfe die Daten  Vierteljahr aller Messpunkte.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere Businesskey '{mmp_name}'
Benötigt werden Messpunkte '{mp1}', '{mp2}'.
nutze die neusten Datensätze. verwende die Daten  der letzten drei Stichtage beider Messpunkte.Multipliziere die Daten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Generiere und verweise auf '{mmp_name}'
Verwende folgende zwei Messpunkte '{mp1}', '{mp2}'.
 Lade Daten der letzten zwei Jahren beider Messpunkte.nutze die ersten Datensätze.Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verweise auf '{mmp_name}' und Generiere einen neuen Metamesspunkt
Lade Messpunkte '{mp1}', '{mp2}'.
Lade Daten nutze letztem Monat .Greife auf alle Datensätze zu.Bilde das Produkt aller Datensatz Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Gestalte einen Metamesspunkt und benutze folgenden Registrierungsnamen '{mmp_name}'
Lade  Messpunkte '{mp1}', '{mp2}'.
Lade Daten der Messpunkte  aktuelles Quartal.nutze den ersten Datensatz.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Greife auf beiden Messpunkte '{mp1}' und '{mp2}'.
Verwende die aktuellsten Datensätze. Extrahiere Daten zum letztem Monat der Messpunkte.Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle diesen neuen Metamesspunkt benutze '{mmp_name}'.
Lade folgende Messpunkte '{mp1}' und '{mp2}'.
Nutze die Daten aller Messpunkte nutze der letzten zwei Quartale.nutze den ersten Datensatz.Führe eine Multiplikation der Fakten durch
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel und benutze Metamesspunkt '{mmp_name}'.
Erstelle beiden Messpunkte '{mp1}' und '{mp2}'.
nutze die neusten Datensätze. Greife auf Daten zu  der letzten zwei Jahren beider Messpunkte.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue diesen neuen Metamesspunkt verbinde mit '{mmp_name}'.
Benutze  beiden Messpunkte '{mp1}' und '{mp2}'.
lade den letzten Datensatz. Lade Daten zum letztes Quartal aller Messpunkte.Führe eine Multiplikation der Fakten durch
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Setze diese diese angegeben Messpunkte '{mp1}' und '{mp2}'.
per Extrahiere Daten der letzten zwei Stichtage beider Messpunkte.nutze den neusten Datensatz.Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche mir einen MetaMesspunkt mit verbinde mit '{mmp_name}'.
Benötigt werden Messpunkte '{mp1}', '{mp2}'.
 Importiere die Daten der letzten zwei Jahren beider Messpunkte.nutze die ersten Datensätze.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe MetaMesspunkt '{mmp_name}'.
Benötigt werden diese Messpunkte '{mp1}', '{mp2}'.
Importiere die Daten nutze der letzten beiden Halbjahre .Greife auf alle Datensätze zu.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel MetaMesspunkt '{mmp_name}'.
Benötigt werden  beiden Messpunkte '{mp1}' und '{mp2}'.
nutze alle Datensätze. Hole Daten  der letzten drei Jahren beider Messpunkte.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verknüpfe mit '{mmp_name}' und Verwirkliche einen neuen Metamesspunkt
Setze diese  Messpunkte '{mp1}' und '{mp2}'.
per verwende die Daten der letzten zwei Quartale .nutze die neusten Datensätze.Aggregiere die Ergebnisse
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche Businesskey '{mmp_name}'
Greife auf Messpunkte '{mp1}', '{mp2}'.
nutze jeden Datensatz. Lade Daten per der letzten drei Jahren der Messpunkte.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Verwende zwei Messpunkte '{mp1}' und '{mp2}'.
nutze verwende die Daten Stichtag .lade den letzten Datensatz.Aggregiere die Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte mir einen MetaMesspunkt mit verbinde mit '{mmp_name}'.
Gebrauche beiden Messpunkte '{mp1}' und '{mp2}'.
Hole Daten beider Messpunkte per der letzten zwei Jahren.Verwende die aktuellsten Datensätze.Berechne die Standardabweichung der Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche MetaMesspunkt '{mmp_name}'.
Benutze folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
Hole Daten der Messpunkte  nutze vorheriges Halbjahr.Verwende die ältesten Datensätze.Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche mir einen MetaMesspunkt mit verknüpfe mit '{mmp_name}'.
Setze diese folgende Messpunkte '{mp1}' und '{mp2}'.
lade alle Datensätze. Prüfe die Daten nutze der letzten drei Stichtage  .Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Baue und benutze '{mmp_name}'
Referenziere Messpunkte '{mp1}', '{mp2}'.
nutze die ersten Datensätze. Nutze die Daten nutze der letzten zwei Halbjahre  .Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe Businesskey '{mmp_name}'
Benutze Messpunkte '{mp1}', '{mp2}'.
 Prüfe die Daten Quartal .Greife auf alle Datensätze zu.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Verwirkliche und nutze '{mmp_name}'
Greife auf beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu nutze der letzten beiden Halbjahre .lade die letzten Datensätze.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe und nutze diesen Metamesspunkt '{mmp_name}'.
Benötigt werden diese angegeben Messpunkte '{mp1}', '{mp2}'.
Greife auf Daten zu zum letztes Halbjahr .Verwende den ältesten Datensatz.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere MetaMesspunkt '{mmp_name}'.
Setze diese folgende zwei Messpunkte '{mp1}', '{mp2}'.
nutze Extrahiere Daten der letzten zwei Jahren aller Messpunkte.lade den letzten Datensatz.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Gebrauche beiden Messpunkte '{mp1}' und '{mp2}'.
Hole Daten aller Messpunkte  zum letztes Quartal.Verwende alle Datensätze.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle und verbinde mit Metamesspunkt '{mmp_name}'.
Benutze folgende beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu zum letzten Stichtag .Verwende jeden Datensatz.Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche diesen neuen Metamesspunkt referenziere mit '{mmp_name}'.
Setze diese  Messpunkte '{mp1}', '{mp2}'.
Hole Daten der Messpunkte  nutze Stichtag.nutze alle Datensätze.Addiere die Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Generiere und verwende '{mmp_name}'
Setze diese zwei Messpunkte '{mp1}' und '{mp2}'.
Prüfe die Daten nutze der letzten beiden Stichtage .Verwende jeden Datensatz.Berechne die Standardabweichung der Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Kreiere und nutze diesen '{mmp_name}'
Referenziere diese angegeben Messpunkte '{mp1}' und '{mp2}'.
per Greife auf Daten zu der letzten zwei Halbjahre .Greife auf alle Datensätze zu.Summiere alle Daten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere und verknüpfe mit Metamesspunkt '{mmp_name}'.
Erstelle Messpunkte '{mp1}', '{mp2}'.
Greife auf den letzten Datensatz zu. Nutze die Daten zum der letzten beiden Halbjahre der Messpunkte.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere Businesskey '{mmp_name}'
Erstelle folgende Messpunkte '{mp1}', '{mp2}'.
Prüfe die Daten  der letzten drei Stichtage .Verwende jeden Datensatz.Multipliziere die Ergebnisse
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende Businesskey '{mmp_name}'
Benötigt werden beiden Messpunkte '{mp1}' und '{mp2}'.
verwende die Daten  der letzten drei Stichtage .Verwende den ältesten Datensatz.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verbinde mit '{mmp_name}' und Implementiere einen neuen Metamesspunkt
Setze diese beiden Messpunkte '{mp1}' und '{mp2}'.
nutze den neusten Datensatz. Lade Daten per letztem Monat beider Messpunkte.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Implementiere und referenziere mit '{mmp_name}'
Benötigt werden zwei Messpunkte '{mp1}' und '{mp2}'.
lade jeden Datensatz. Importiere die Daten zum Stichtag  .Berechne die Standardabweichung der Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Referenziere folgende Messpunkte '{mp1}', '{mp2}'.
verwende die Daten per vorletzten Stichtag .Greife auf alle Datensätze zu.Berechne die Standardabweichung der Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: referenziere mit '{mmp_name}' und Verwende einen neuen Metamesspunkt
Erstelle beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf den ersten Datensatz zu. Importiere die Daten per aktuellen und letzter Stichtag  .Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere diesen neuen Metamesspunkt verknüpfe '{mmp_name}'.
Gebrauche  beiden Messpunkte '{mp1}' und '{mp2}'.
zum Lade Daten der letzten zwei Halbjahre der Messpunkte.Verwende den aktuellesten Datensatz.Berechne den kleinsten Wert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere diesen neuen Metamesspunkt verbinde mit '{mmp_name}'.
Referenziere folgende beiden Messpunkte '{mp1}' und '{mp2}'.
Lade Daten per letztes Quartal .Verwende alle Datensätze.Berechne die Standardabweichung der Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere diesen neuen Metamesspunkt verknüpfe '{mmp_name}'.
Erstelle beiden Messpunkte '{mp1}' und '{mp2}'.
nutze Nutze die Daten vorheriges Halbjahr der Messpunkte.lade den ersten Datensatz.Berechne die Standardabweichung der Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Baue und referenziere mit '{mmp_name}'
Benutze beiden Messpunkte '{mp1}' und '{mp2}'.
Prüfe die Daten  letztes Halbjahr .nutze den ersten Datensatz.Berechne den kleinsten Wert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe MetaMesspunkt '{mmp_name}'.
Referenziere beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu aller Messpunkte  zum letztes Jahr.Greife auf den ersten Datensatz zu.Addiere die Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Benötigt werden Messpunkte '{mp1}', '{mp2}'.
Hole Daten per der letzten zwei Jahren .Verwende alle Datensätze.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere und nutze Metamesspunkt '{mmp_name}'.
Verwende Messpunkte '{mp1}', '{mp2}'.
Prüfe die Daten nutze aktuelles Halbjahr .nutze die neusten Datensätze.Berechne die Standardabweichung der Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Installiere und verbinde mit '{mmp_name}'
Setze diese Messpunkte '{mp1}', '{mp2}'.
per verwende die Daten letztem Monat .Greife auf den letzten Datensatz zu.Multipliziere die Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe MetaMesspunkt '{mmp_name}'.
Nutze Messpunkte '{mp1}', '{mp2}'.
nutze Nutze die Daten Stichtag .nutze alle Datensätze.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende mir einen MetaMesspunkt mit nutze diesen '{mmp_name}'.
Setze diese  Messpunkte '{mp1}', '{mp2}'.
nutze Lade Daten der letzten beiden Halbjahre aller Messpunkte.Verwende alle Datensätze.Berechne die Standardabweichung der Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Baue und nutze diesen '{mmp_name}'
Verwende beiden Messpunkte '{mp1}' und '{mp2}'.
Hole Daten aller Messpunkte per der letzten drei Stichtage.Verwende die ältesten Datensätze.Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Gebrauche beiden Messpunkte '{mp1}' und '{mp2}'.
lade den letzten Datensatz. Nutze die Daten  aktuellen und letzter Stichtag  .Berechne die Standardabweichung der Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende und benutze Metamesspunkt '{mmp_name}'.
Referenziere zwei Messpunkte '{mp1}' und '{mp2}'.
nutze Extrahiere Daten vorheriges Halbjahr aller Messpunkte.nutze den neusten Datensatz.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verknüpfe '{mmp_name}' und Kreiere einen neuen Metamesspunkt
Verwende zwei Messpunkte '{mp1}' und '{mp2}'.
 Nutze die Daten letztem Monat .Verwende jeden Datensatz.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Nutze zwei Messpunkte '{mp1}' und '{mp2}'.
nutze Nutze die Daten der letzten beiden Stichtage .nutze die neusten Datensätze.Berechne die Standardabweichung der Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Bastel einen Metamesspunkt und referenziere mit folgenden Registrierungsnamen '{mmp_name}'
Lade diese angegeben beiden Messpunkte '{mp1}' und '{mp2}'.
nutze den ersten Datensatz. Greife auf Daten zu nutze vorheriges Halbjahr aller Messpunkte.Berechne die Standardabweichung der Datensätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verbinde mit '{mmp_name}' und Generiere einen neuen Metamesspunkt
Benötigt werden Messpunkte '{mp1}', '{mp2}'.
 verwende die Daten letzten Stichtag aller Messpunkte.Verwende die ältesten Datensätze.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Verwirkliche und verwende '{mmp_name}'
Erstelle  beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf den ersten Datensatz zu. Nutze die Daten nutze vorheriger Stichtag  .Bilde das Produkt aller Wert Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue und referenziere mit Metamesspunkt '{mmp_name}'.
Benötigt werden beiden Messpunkte '{mp1}' und '{mp2}'.
 Nutze die Daten der letzten zwei Jahren .nutze den neusten Datensatz.Aggregiere die Daten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche und verbinde Metamesspunkt '{mmp_name}'.
Benutze zwei Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu aller Messpunkte   dieses Halbjahr.lade die frühesten Datensätze.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Installiere einen Metamesspunkt und benutze folgenden Registrierungsnamen '{mmp_name}'
Nutze diese Messpunkte '{mp1}' und '{mp2}'.
Lade Daten der Messpunkte zum der letzten beiden Halbjahre.lade alle Datensätze.Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere und benutze Metamesspunkt '{mmp_name}'.
Lade beiden Messpunkte '{mp1}' und '{mp2}'.
Prüfe die Daten beider Messpunkte   der letzten beiden Halbjahre.lade den ersten Datensatz.Bilde das Produkt aller Messwert Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Verwende  Messpunkte '{mp1}', '{mp2}'.
 Prüfe die Daten letztes Quartal aller Messpunkte.nutze den neusten Datensatz.Berechne die Standardabweichung der Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere und verwende Metamesspunkt '{mmp_name}'.
Verwende folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
nutze den ersten Datensatz. Greife auf Daten zu  der letzten zwei Jahren beider Messpunkte.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Baue und verknüpfe mit '{mmp_name}'
Lade diese angegeben Messpunkte '{mp1}' und '{mp2}'.
zum Greife auf Daten zu der letzten drei Stichtage aller Messpunkte.lade jeden Datensatz.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere MetaMesspunkt '{mmp_name}'.
Benötigt werden zwei Messpunkte '{mp1}' und '{mp2}'.
verwende die Daten zum der letzten drei Jahren .nutze jeden Datensatz.Bilde das Produkt aller Messwert Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere Businesskey '{mmp_name}'
Setze diese folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
Nutze die Daten der Messpunkte  per der letzten drei Stichtage.nutze den ersten Datensatz.Berechne die Standardabweichung der Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte MetaMesspunkt '{mmp_name}'.
Gebrauche folgende zwei Messpunkte '{mp1}' und '{mp2}'.
Prüfe die Daten zum vorheriger Stichtag .nutze den neusten Datensatz.Berechne die Standardabweichung der Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe mir einen MetaMesspunkt mit verknüpfe mit '{mmp_name}'.
Benötigt werden Messpunkte '{mp1}', '{mp2}'.
 Importiere die Daten der letzten drei Jahren der Messpunkte.Verwende alle Datensätze.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende und verknüpfe mit Metamesspunkt '{mmp_name}'.
Verwende Messpunkte '{mp1}', '{mp2}'.
Lade Daten per letztes Jahr .Greife auf den ersten Datensatz zu.Berechne die Standardabweichung der Messerte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere MetaMesspunkt '{mmp_name}'.
Lade diese angegeben Messpunkte '{mp1}', '{mp2}'.
verwende die Daten der Messpunkte nutze der letzten zwei Jahren.Verwende die ältesten Datensätze.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Benutze diese Messpunkte '{mp1}' und '{mp2}'.
lade alle Datensätze. Nutze die Daten zum letzten Stichtag  .Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel MetaMesspunkt '{mmp_name}'.
Lade beiden Messpunkte '{mp1}' und '{mp2}'.
 Lade Daten der letzten drei Stichtage beider Messpunkte.lade die letzten Datensätze.Berechne die Standardabweichung der Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: benutze '{mmp_name}' und Baue einen neuen Metamesspunkt
Gebrauche zwei Messpunkte '{mp1}' und '{mp2}'.
Prüfe die Daten zum letztes Halbjahr .lade die letzten Datensätze.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle und verknüpfe Metamesspunkt '{mmp_name}'.
Gebrauche folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
verwende die Daten der Messpunkte  per der letzten beiden Quartale.lade den letzten Datensatz.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: referenziere mit '{mmp_name}' und Verwende einen neuen Metamesspunkt
Gebrauche zwei Messpunkte '{mp1}' und '{mp2}'.
Hole Daten beider Messpunkte  Stichtag.nutze jeden Datensatz.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Kreiere einen Metamesspunkt und nutze folgenden Registrierungsnamen '{mmp_name}'
Benutze diese angegeben Messpunkte '{mp1}', '{mp2}'.
Prüfe die Daten nutze vorheriges Halbjahr .lade den ersten Datensatz.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche mir einen MetaMesspunkt mit benutze '{mmp_name}'.
Nutze Messpunkte '{mp1}', '{mp2}'.
lade die frühesten Datensätze. Importiere die Daten  der letzten zwei Quartale beider Messpunkte.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere Businesskey '{mmp_name}'
Lade folgende beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu nutze vorletzten Stichtag .Verwende alle Datensätze.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere diesen neuen Metamesspunkt verknüpfe '{mmp_name}'.
Benutze beiden Messpunkte '{mp1}' und '{mp2}'.
Extrahiere Daten der Messpunkte   Halbjahr.lade die letzten Datensätze.Multipliziere die Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere MetaMesspunkt '{mmp_name}'.
Referenziere  Messpunkte '{mp1}' und '{mp2}'.
Lade Daten  der letzten drei Stichtage .Verwende die aktuellsten Datensätze.Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Generiere einen Metamesspunkt und verweise auf folgenden Registrierungsnamen '{mmp_name}'
Referenziere Messpunkte '{mp1}', '{mp2}'.
Greife auf Daten zu beider Messpunkte   vorheriges Halbjahr.nutze die ersten Datensätze.Bilde das Produkt aller Wert Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Benötigt werden  beiden Messpunkte '{mp1}' und '{mp2}'.
 Greife auf Daten zu aktuelles Halbjahr .lade jeden Datensatz.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere MetaMesspunkt '{mmp_name}'.
Verwende folgende beiden Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten zum der letzten drei Stichtage .lade die frühesten Datensätze.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verknüpfe '{mmp_name}' und Gestalte einen neuen Metamesspunkt
Gebrauche beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf alle Datensätze zu. Importiere die Daten  der letzten drei Stichtage  .Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel mir einen MetaMesspunkt mit benutze '{mmp_name}'.
Benötigt werden zwei Messpunkte '{mp1}' und '{mp2}'.
 Hole Daten vor zwei Monaten aller Messpunkte.nutze den ersten Datensatz.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende diesen neuen Metamesspunkt verweise auf '{mmp_name}'.
Setze diese folgende Messpunkte '{mp1}', '{mp2}'.
zum Importiere die Daten letztes Quartal .nutze alle Datensätze.Multipliziere die Datensätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Verwende einen Metamesspunkt und verknüpfe folgenden Registrierungsnamen '{mmp_name}'
Benötigt werden Messpunkte '{mp1}', '{mp2}'.
per verwende die Daten letzten Stichtag .Verwende den ältesten Datensatz.Addiere die Datensätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Erstelle zwei Messpunkte '{mp1}' und '{mp2}'.
zum Greife auf Daten zu letztes Quartal beider Messpunkte.nutze den ersten Datensatz.Berechne die Standardabweichung der Daten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Bastel einen Metamesspunkt und verwende folgenden Registrierungsnamen '{mmp_name}'
Benötigt werden zwei Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu beider Messpunkte zum letzter Monat.nutze die ersten Datensätze.Addiere die Daten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue MetaMesspunkt '{mmp_name}'.
Gebrauche folgende Messpunkte '{mp1}', '{mp2}'.
zum Lade Daten vorheriges Halbjahr beider Messpunkte.Verwende alle Datensätze.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Baue einen Metamesspunkt und nutze folgenden Registrierungsnamen '{mmp_name}'
Greife auf zwei Messpunkte '{mp1}' und '{mp2}'.
nutze Lade Daten der letzten beiden Quartale beider Messpunkte.Greife auf den ersten Datensatz zu.Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Generiere und nutze diesen '{mmp_name}'
Gebrauche beiden Messpunkte '{mp1}' und '{mp2}'.
Lade Daten  letzter Monat .nutze den ersten Datensatz.Bilde das Produkt aller Satz Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verknüpfe mit '{mmp_name}' und Implementiere einen neuen Metamesspunkt
Greife auf  Messpunkte '{mp1}', '{mp2}'.
verwende die Daten nutze vorherigen Stichtag .Verwende den ältesten Datensatz.Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Benötigt wird ein metamesspunkt. Kreiere und benutze '{mmp_name}'
Erstelle zwei Messpunkte '{mp1}' und '{mp2}'.
lade jeden Datensatz. Lade Daten nutze vorheriges Halbjahr  .Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche Businesskey '{mmp_name}'
Gebrauche zwei Messpunkte '{mp1}' und '{mp2}'.
Greife auf den ersten Datensatz zu. Nutze die Daten zum der letzten drei Jahren  .Bilde das Produkt aller Satz Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel Businesskey '{mmp_name}'
Lade Messpunkte '{mp1}', '{mp2}'.
lade den ersten Datensatz. verwende die Daten nutze der letzten zwei Stichtage aller Messpunkte.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue Businesskey '{mmp_name}'
Benötigt werden folgende zwei Messpunkte '{mp1}', '{mp2}'.
Verwende jeden Datensatz. Extrahiere Daten zum der letzten drei Stichtage  .Führe eine Multiplikation der Daten durch
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere MetaMesspunkt '{mmp_name}'.
Greife auf Messpunkte '{mp1}', '{mp2}'.
Extrahiere Daten aller Messpunkte nutze der letzten beiden Quartale.lade den letzten Datensatz.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere mir einen MetaMesspunkt mit referenziere mit '{mmp_name}'.
Verwende beiden Messpunkte '{mp1}' und '{mp2}'.
Prüfe die Daten aller Messpunkte  per der letzten zwei Jahren.lade den letzten Datensatz.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere und verbinde Metamesspunkt '{mmp_name}'.
Verwende beiden Messpunkte '{mp1}' und '{mp2}'.
nutze die ersten Datensätze. Nutze die Daten per letztes Jahr aller Messpunkte.Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere und verknüpfe mit Metamesspunkt '{mmp_name}'.
Setze diese diese Messpunkte '{mp1}' und '{mp2}'.
nutze den ersten Datensatz. Lade Daten  vorletzten Stichtag  .Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe Businesskey '{mmp_name}'
Nutze  beiden Messpunkte '{mp1}' und '{mp2}'.
Verwende jeden Datensatz. Lade Daten per der letzten zwei Stichtage  .Multipliziere die Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere mir einen MetaMesspunkt mit referenziere mit '{mmp_name}'.
Referenziere diese Messpunkte '{mp1}' und '{mp2}'.
Hole Daten beider Messpunkte   der letzten drei Jahren.Greife auf alle Datensätze zu.Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere Businesskey '{mmp_name}'
Greife auf beiden Messpunkte '{mp1}' und '{mp2}'.
Extrahiere Daten nutze letztes Jahr .nutze den neusten Datensatz.Multipliziere die Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche diesen neuen Metamesspunkt verwende '{mmp_name}'.
Gebrauche diese angegeben Messpunkte '{mp1}' und '{mp2}'.
Extrahiere Daten beider Messpunkte  nutze letztes Jahr.lade die letzten Datensätze.Berechne die Standardabweichung der Werte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere und nutze diesen Metamesspunkt '{mmp_name}'.
Greife auf beiden Messpunkte '{mp1}' und '{mp2}'.
per Extrahiere Daten vor zwei Monaten .nutze jeden Datensatz.Aggregiere die Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende und referenziere mit Metamesspunkt '{mmp_name}'.
Nutze beiden Messpunkte '{mp1}' und '{mp2}'.
Nutze die Daten der Messpunkte  zum letztes Jahr.Greife auf den letzten Datensatz zu.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende Businesskey '{mmp_name}'
Referenziere beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu aller Messpunkte  vor zwei Monaten.lade jeden Datensatz.Berechne die Standardabweichung der Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Entwerfe einen Metamesspunkt und verwende folgenden Registrierungsnamen '{mmp_name}'
Benutze Messpunkte '{mp1}', '{mp2}'.
Greife auf Daten zu aller Messpunkte  letztes Jahr.Greife auf alle Datensätze zu.Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue MetaMesspunkt '{mmp_name}'.
Erstelle Messpunkte '{mp1}', '{mp2}'.
Greife auf Daten zu beider Messpunkte   aktuelles Quartal.nutze die neusten Datensätze.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Gestalte einen Metamesspunkt und benutze folgenden Registrierungsnamen '{mmp_name}'
Greife auf beiden Messpunkte '{mp1}' und '{mp2}'.
Lade Daten per aktuellen und letzter Stichtag .lade den letzten Datensatz.Berechne den größten Wert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verknüpfe '{mmp_name}' und Erstelle einen neuen Metamesspunkt
Erstelle diese Messpunkte '{mp1}', '{mp2}'.
lade die letzten Datensätze. verwende die Daten nutze aktuelles Halbjahr aller Messpunkte.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere Businesskey '{mmp_name}'
Benutze folgende beiden Messpunkte '{mp1}' und '{mp2}'.
zum verwende die Daten der letzten zwei Quartale aller Messpunkte.nutze den ersten Datensatz.Berechne die Standardabweichung der Datensätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Referenziere  beiden Messpunkte '{mp1}' und '{mp2}'.
nutze Hole Daten der letzten zwei Jahren .lade alle Datensätze.Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere und nutze Metamesspunkt '{mmp_name}'.
Lade  beiden Messpunkte '{mp1}' und '{mp2}'.
per Prüfe die Daten letztes Jahr .Verwende alle Datensätze.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere Businesskey '{mmp_name}'
Greife auf Messpunkte '{mp1}', '{mp2}'.
nutze die ersten Datensätze. Extrahiere Daten zum der letzten zwei Stichtage der Messpunkte.Summiere alle Messerte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Erstelle einen Metamesspunkt und verknüpfe folgenden Registrierungsnamen '{mmp_name}'
Verwende  Messpunkte '{mp1}', '{mp2}'.
Verwende den aktuellesten Datensatz. Greife auf Daten zu zum vorheriges Halbjahr beider Messpunkte.Berechne die Standardabweichung der Messerte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere Businesskey '{mmp_name}'
Benutze diese beiden Messpunkte '{mp1}' und '{mp2}'.
zum Extrahiere Daten der letzten zwei Halbjahre .Greife auf den ersten Datensatz zu.Addiere die Messerte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Nutze beiden Messpunkte '{mp1}' und '{mp2}'.
Verwende den ältesten Datensatz. Lade Daten nutze vorheriges Halbjahr  .Addiere die Datensätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende MetaMesspunkt '{mmp_name}'.
Setze diese beiden Messpunkte '{mp1}' und '{mp2}'.
verwende die Daten  vorheriger Stichtag .Greife auf alle Datensätze zu.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: nutze '{mmp_name}' und Baue einen neuen Metamesspunkt
Verwende beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf den letzten Datensatz zu. Lade Daten nutze letztes Jahr  .Berechne die Standardabweichung der Ergebnisse
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende mir einen MetaMesspunkt mit benutze '{mmp_name}'.
Erstelle  Messpunkte '{mp1}', '{mp2}'.
Prüfe die Daten der Messpunkte per letztes Jahr.Greife auf den letzten Datensatz zu.Berechne den kleinsten Wert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte MetaMesspunkt '{mmp_name}'.
Verwende folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
Extrahiere Daten der Messpunkte  nutze vorherigen Stichtag.nutze alle Datensätze.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verwende '{mmp_name}' und Kreiere einen neuen Metamesspunkt
Verwende Messpunkte '{mp1}', '{mp2}'.
Greife auf Daten zu der Messpunkte per vorletzter Stichtag.nutze alle Datensätze.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Benutze beiden Messpunkte '{mp1}' und '{mp2}'.
lade die letzten Datensätze. Extrahiere Daten per vor zwei Monaten  .Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe und verbinde Metamesspunkt '{mmp_name}'.
Erstelle Messpunkte '{mp1}', '{mp2}'.
nutze Nutze die Daten der letzten zwei Halbjahre .nutze den neusten Datensatz.Berechne die Standardabweichung der Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF','HREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF','HREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle und referenziere mit Metamesspunkt '{mmp_name}'.
Benutze zwei Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu per vorheriges Quartal .nutze jeden Datensatz.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe diesen neuen Metamesspunkt nutze '{mmp_name}'.
Referenziere zwei Messpunkte '{mp1}' und '{mp2}'.
Greife auf alle Datensätze zu. Prüfe die Daten zum der letzten zwei Jahren aller Messpunkte.Aggregiere die Datensätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Kreiere MetaMesspunkt '{mmp_name}'.
Referenziere diese angegeben beiden Messpunkte '{mp1}' und '{mp2}'.
zum Importiere die Daten Stichtag .lade alle Datensätze.Summiere alle Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche diesen neuen Metamesspunkt verweise auf '{mmp_name}'.
Verwende Messpunkte '{mp1}', '{mp2}'.
Greife auf Daten zu  aktuellen und letzter Stichtag .lade den letzten Datensatz.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende mir einen MetaMesspunkt mit verknüpfe '{mmp_name}'.
Benutze diese angegeben Messpunkte '{mp1}' und '{mp2}'.
nutze Extrahiere Daten Vierteljahr .lade jeden Datensatz.Addiere die Sätze
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verknüpfe '{mmp_name}' und Installiere einen neuen Metamesspunkt
Lade beiden Messpunkte '{mp1}' und '{mp2}'.
per Hole Daten letztes Halbjahr .nutze die ersten Datensätze.Berechne den kleinsten Wert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Setze diese zwei Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu per der letzten zwei Jahren .Verwende die aktuellsten Datensätze.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende MetaMesspunkt '{mmp_name}'.
Benötigt werden  Messpunkte '{mp1}', '{mp2}'.
Hole Daten  letztes Jahr .nutze den ersten Datensatz.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe mir einen MetaMesspunkt mit verweise auf '{mmp_name}'.
Setze diese beiden Messpunkte '{mp1}' und '{mp2}'.
 Lade Daten der letzten drei Jahren .nutze den neusten Datensatz.Addiere die Messerte
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe Businesskey '{mmp_name}'
Lade Messpunkte '{mp1}', '{mp2}'.
nutze den neusten Datensatz. Prüfe die Daten per der letzten zwei Jahren  .Führe eine Multiplikation der Informationen durch
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle diesen neuen Metamesspunkt verweise auf '{mmp_name}'.
Gebrauche folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten zum letztes Jahr .Verwende den aktuellesten Datensatz.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue und verknüpfe mit Metamesspunkt '{mmp_name}'.
Benötigt werden folgende zwei Messpunkte '{mp1}', '{mp2}'.
Hole Daten beider Messpunkte  vorheriges Quartal.lade den letzten Datensatz.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: verwende '{mmp_name}' und Erstelle einen neuen Metamesspunkt
Gebrauche folgende Messpunkte '{mp1}' und '{mp2}'.
Extrahiere Daten der Messpunkte per Halbjahr.Greife auf alle Datensätze zu.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche Businesskey '{mmp_name}'
Setze diese Messpunkte '{mp1}', '{mp2}'.
zum Importiere die Daten vor zwei Monaten .Verwende den ältesten Datensatz.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Setze diese zwei Messpunkte '{mp1}' und '{mp2}'.
Nutze die Daten beider Messpunkte nutze der letzten zwei Jahren.nutze alle Datensätze.Berechne den größten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Erstelle einen Metamesspunkt und verknüpfe folgenden Registrierungsnamen '{mmp_name}'
Gebrauche diese angegeben beiden Messpunkte '{mp1}' und '{mp2}'.
Hole Daten  aktuellen und letzter Stichtag .nutze die neusten Datensätze.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle mir einen MetaMesspunkt mit verbinde mit '{mmp_name}'.
Erstelle folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
Nutze die Daten beider Messpunkte per der letzten drei Jahren.Verwende den aktuellesten Datensatz.Berechne die Standardabweichung der Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Gestalte Businesskey '{mmp_name}'
Lade folgende zwei beiden Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten per der letzten zwei Quartale .Greife auf den ersten Datensatz zu.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche und nutze Metamesspunkt '{mmp_name}'.
Lade zwei Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten beider Messpunkte nutze Vierteljahr.Greife auf alle Datensätze zu.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel Businesskey '{mmp_name}'
Verwende folgende beiden Messpunkte '{mp1}' und '{mp2}'.
Verwende die aktuellsten Datensätze. Greife auf Daten zu zum letztes Quartal  .Berechne die Standardabweichung der Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Nutze diese Messpunkte '{mp1}' und '{mp2}'.
lade die frühesten Datensätze. Prüfe die Daten nutze aktuelles Halbjahr aller Messpunkte.Ziehe die Werte voneinander ab
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bastel MetaMesspunkt '{mmp_name}'.
Benutze diese angegeben Messpunkte '{mp1}' und '{mp2}'.
Nutze die Daten  der letzten drei Stichtage .nutze die ersten Datensätze.Aggregiere die Fakten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Benötigt werden folgende zwei Messpunkte '{mp1}' und '{mp2}'.
Importiere die Daten  der letzten zwei Stichtage .lade den ersten Datensatz.Aggregiere die Ergebnisse
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Verwirkliche einen Metamesspunkt und verknüpfe folgenden Registrierungsnamen '{mmp_name}'
Nutze diese angegeben Messpunkte '{mp1}' und '{mp2}'.
nutze alle Datensätze. Importiere die Daten zum der letzten zwei Stichtage aller Messpunkte.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe Businesskey '{mmp_name}'
Benötigt werden beiden Messpunkte '{mp1}' und '{mp2}'.
zum Lade Daten aktuelles Halbjahr beider Messpunkte.Greife auf alle Datensätze zu.Berechne die Differenz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=DIFF)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere Businesskey '{mmp_name}'
Erstelle diese beiden Messpunkte '{mp1}' und '{mp2}'.
Extrahiere Daten beider Messpunkte  zum der letzten drei Stichtage.Greife auf den ersten Datensatz zu.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere mir einen MetaMesspunkt mit verknüpfe mit '{mmp_name}'.
Greife auf Messpunkte '{mp1}', '{mp2}'.
Importiere die Daten beider Messpunkte  nutze der letzten drei Jahren.lade den letzten Datensatz.Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Entwerfe MetaMesspunkt '{mmp_name}'.
Erstelle  Messpunkte '{mp1}', '{mp2}'.
Nutze die Daten aller Messpunkte  der letzten drei Stichtage.lade die frühesten Datensätze.Berechne den kleinsten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Baue mir einen MetaMesspunkt mit verbinde '{mmp_name}'.
Nutze  beiden Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu aller Messpunkte  per der letzten zwei Jahren.nutze jeden Datensatz.Führe eine Multiplikation der Messerte durch
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MULT)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle und verweise auf Metamesspunkt '{mmp_name}'.
Greife auf  beiden Messpunkte '{mp1}' und '{mp2}'.
Verwende jeden Datensatz. Lade Daten  aktuellen und letzter Stichtag beider Messpunkte.Berechne die Standardabweichung der Ergebnisse
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle MetaMesspunkt '{mmp_name}'.
Benötigt werden Messpunkte '{mp1}', '{mp2}'.
Greife auf den letzten Datensatz zu. Prüfe die Daten nutze der letzten beiden Quartale  .Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF','QREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF','QREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwirkliche einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Benutze zwei Messpunkte '{mp1}' und '{mp2}'.
Greife auf Daten zu aller Messpunkte  nutze vorheriger Stichtag.Greife auf alle Datensätze zu.Summiere alle Ergebnisse
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Bitte Installiere einen Metamesspunkt und benutze folgenden Registrierungsnamen '{mmp_name}'
Erstelle folgende zwei Messpunkte '{mp1}' und '{mp2}'.
Nutze die Daten nutze vorheriger Stichtag .lade den letzten Datensatz.Berechne den kleinsten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF-1'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF-1'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Nutze diese angegeben beiden Messpunkte '{mp1}' und '{mp2}'.
per verwende die Daten der letzten drei Stichtage .Verwende den aktuellesten Datensatz.Berechne den größten Datensatz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['CREF','CREF-1', 'CREF-2'], range=LATEST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['CREF','CREF-1', 'CREF-2'], range=LATEST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Generiere einen MetaMesspunkt mit folgendem Namen '{mmp_name}'.
Benötigt werden diese angegeben beiden Messpunkte '{mp1}' und '{mp2}'.
per Lade Daten Quartal der Messpunkte.Verwende jeden Datensatz.Berechne den größten Satz
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['QREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['QREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MAX)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Installiere mir einen MetaMesspunkt mit verbinde mit '{mmp_name}'.
Benötigt werden diese beiden Messpunkte '{mp1}' und '{mp2}'.
Verwende alle Datensätze. Hole Daten nutze Halbjahr  .Berechne den kleinsten Wert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=ALL)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=ALL)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Implementiere MetaMesspunkt '{mmp_name}'.
Lade beiden Messpunkte '{mp1}' und '{mp2}'.
nutze den ersten Datensatz. Hole Daten per der letzten zwei Jahren beider Messpunkte.Summiere alle Daten
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=AGG)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Verwende mir einen MetaMesspunkt mit verbinde '{mmp_name}'.
Greife auf Messpunkte '{mp1}', '{mp2}'.
nutze den ersten Datensatz. Greife auf Daten zu zum Halbjahr beider Messpunkte.Berechne den kleinsten Messwert
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['HREF'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['HREF'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=MIN)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
prompt: Erstelle diesen neuen Metamesspunkt verknüpfe '{mmp_name}'.
Lade zwei Messpunkte '{mp1}' und '{mp2}'.
per Nutze die Daten der letzten drei Jahren .lade die frühesten Datensätze.Berechne die Standardabweichung der Informationen
template: 
code: #
#--------------------------------------------------------------------------
# SIMQL Template with two input measurements
# result is calculated via one compute data statement for all 
# input measurements
#--------------------------------------------------------------------------

mmp {mmp_alias} 
 
    register "{mmp_name}"
     
    section measurements: 
        vMP1 reference "{mp1}" 
        vMP2 reference "{mp2}" 
 
    section variables: 
        define vTmp1, vTmp2, vResult 
         
    section logic: #all the logic goes here

        vTmp1 = LOAD DATA(ref=[vMP1], refdates=['YREF','YREF-1','YREF-2'], range=FIRST)
        vTmp2 = LOAD DATA(ref=[vMP2], refdates=['YREF','YREF-1','YREF-2'], range=FIRST)
        vResult = COMPUTE DATA(variables=[vTmp1, vTmp2], math=STDEV)
    
    section result:
        save  vResult #save our final result
     
end 
;
|
#<END>-------------------------------------------------------------------------
Generiert wurden '{number_of_prompts}' eindeutige prompts
#------------------------------------------------------------------------------
